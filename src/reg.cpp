// handle alias registry stuff
#include "inc/reg.h"

AliasGroup::AliasGroup() {}
AliasGroup::AliasGroup(std::deque<uint8_t>& data)
{
    try
    {
        load(data);
    }
    catch(...)
    {
        throw;
    }
}
void AliasGroup::load(std::deque<uint8_t>& data)
{
    try
    {
        uint8_t num_subels = dq_getpop(data); // includes both subgroups and (sub)aliases
        while(num_subels--)
        {
            // read through subels (cse = current sub element)
            // get subel type (1B), 1 --> alias, 2 --> group
            uint8_t cse_type = dq_getpop(data);
            if(cse_type == 1)
            {
                std::string alias = "";
                std::string path = "";

                // load alias until \0
                uint8_t ch;
                while(dq_getpop(data, &ch))
                    alias += (char)ch;

                // load path until \0
                while(dq_getpop(data, &ch))
                    path += (char)ch;

                // stick in map
                aliases[alias] = path;
            }
            else if(cse_type == 2)
            {
                // load name until \0
                std::string grp_name = "";
                uint8_t ch;
                while(dq_getpop(data, &ch))
                    grp_name += (char)ch;

                // create subgroup, pass datastream to it
                subgroups[grp_name] = AliasGroup(data);
            }
            else
            {
                throw std::string("invalid data");
            }
        }
    }
    catch(std::string) // will be generated by us
    {
        throw;
    }
    catch(...) // will be generated by stl, probably
    {
        throw std::string("invalid data");
    }
}
std::string AliasGroup::get_path(std::deque<std::string>& alias_accession)
{
    try
    {
        if(alias_accession.size() == 1)
            return aliases[alias_accession.front()];
        else
            return subgroups[dq_getpop(alias_accession)].get_path(alias_accession);
    }
    catch(...)
    {
        throw std::string("invalid alias");
    }
}

AliasRegistry::AliasRegistry(){}
AliasRegistry::AliasRegistry(const std::string& path)
{
    try
    {
        load(path);
    }
    catch(...)
    {
        throw;
    }
}
void AliasRegistry::load(const std::string& path)
{
    std::deque<uint8_t> data;

    // open file
    std::ifstream fin(path, std::ios::bin | std::ios::in);
    if(!fin)
        throw std::string("could not open registry");

    // read file
    char ch;
    fin.get(ch);
    while(fin)
    {
        data.push_back((uint8_t)ch);
        fin.get(ch);
    }
    fin.close();

    // load as top group using inherited data processing func
    try
    {
        load(data);
    }
    catch(...) // everything should be std::string
    {
        throw;
    }
}
std::string AliasRegistry::get_path(const std::string& alias_accession)
{
    try
    {
        if(alias_accession[0] == ':')
            return aliases[alias_accession.substr(1)];
        else
        {
            auto split = split_str(alias_accession, ':');
            std::deque<std::string> new_aa(split.begin(), split.end());
            return get_path(new_aa);
        }
    }
    catch(std::string)
    {
        throw;
    }
    catch(...)
    {
        throw std::string("invalid alias");
    }
}
